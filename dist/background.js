const l={},m=(l==null?void 0:l.VITE_VAPID_PUBLIC_KEY)??"",p=(l==null?void 0:l.VITE_BACKEND_SUBSCRIBE_URL)??"",g=[{time:"09:00",action:"sitting",enabled:!0},{time:"11:00",action:"standing",enabled:!0},{time:"14:00",action:"sitting",enabled:!0}],u={notificationType:"both",workDays:{monday:!0,tuesday:!0,wednesday:!0,thursday:!0,friday:!0,saturday:!0,sunday:!0},workHours:{start:"09:00",end:"18:00",enabled:!1}};function A(e){const n="=".repeat((4-e.length%4)%4),o=(e+n).replace(/-/g,"+").replace(/_/g,"/"),t=atob(o),a=new Uint8Array(t.length);for(let r=0;r<t.length;++r)a[r]=t.charCodeAt(r);return a}function T(e){const n=new Date,o=n.getDay(),t=n.getHours()*60+n.getMinutes();(!e.workDays||!e.workHours)&&(console.log("⚠️ Configuración incompleta, usando configuración por defecto"),e={...e,...u});const r=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"][o];if(!e.workDays[r])return console.log(`❌ Notificación bloqueada: ${r} no está habilitado`),!1;if(e.workHours&&e.workHours.enabled){const[i,c]=e.workHours.start.split(":").map(Number),[s,f]=e.workHours.end.split(":").map(Number),y=i*60+c,b=s*60+f;if(t<y||t>b)return console.log(`❌ Notificación bloqueada: fuera del horario de trabajo (${e.workHours.start} - ${e.workHours.end})`),!1}return console.log(`✅ Notificación permitida: ${r} dentro del horario`),!0}function d(e){const n={...e,silent:!1,requireInteraction:!0,priority:2};try{const o=new Audio("data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT");o.volume=.7,o.play().catch(t=>console.log("🔊 Audio no disponible:",t))}catch(o){console.log("🔊 Audio no disponible:",o)}return new Promise(o=>chrome.notifications.create(n,t=>o(t)))}async function w(){if(!m)return console.log("⚠️ VAPID_PUBLIC_KEY no configurada, Web Push deshabilitado"),null;try{console.log("🔐 Configurando suscripción Web Push...");const e=await self.registration.pushManager.getSubscription()??await self.registration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:A(m)});return console.log("✅ Suscripción Web Push creada:",e.endpoint),p&&(console.log("📤 Enviando suscripción al backend..."),await fetch(p,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(e)}),console.log("✅ Suscripción enviada al backend")),e}catch(e){return console.error("❌ Error en suscripción Web Push:",e),null}}self.addEventListener("push",e=>{console.log("📨 Push recibido:",e),e.waitUntil((async()=>{let n={};try{n=e.data?await e.data.json():{}}catch(a){console.error("❌ Error parseando payload:",a)}const o=n.title??"Standing Desk Reminder",t=n.body??"Es hora de cambiar de postura";console.log("🔔 Mostrando notificación push:",{title:o,message:t}),await d({type:"basic",iconUrl:"icon-128.png",title:o,message:t,requireInteraction:!0})})())});function h(){console.log("🔧 Configurando alarmas de Standing Desk..."),chrome.storage.sync.get(["schedule"],e=>{console.log("📋 Datos leídos del storage para alarmas:",e);const n=e.schedule||g;chrome.alarms.clearAll(()=>{console.log("🧹 Alarmas anteriores limpiadas");let o=0;n.forEach((t,a)=>{if(console.log(`📋 Procesando item ${a}:`,t),t.enabled){const[r,i]=t.time.split(":").map(Number),c=new Date,s=new Date;s.setHours(r,i,0,0),s<=c&&s.setDate(s.getDate()+1),chrome.alarms.create(`standing_desk_${a}`,{when:s.getTime(),periodInMinutes:24*60}),o++,console.log(`⏰ Alarma ${a} programada para ${t.time} (${t.action})`),console.log(`📅 Próxima ejecución: ${s.toLocaleString()}`)}else console.log(`❌ Alarma ${a} deshabilitada`)}),console.log(`✅ Total de alarmas creadas: ${o}`),chrome.alarms.getAll(t=>{console.log("📋 Alarmas activas después de setup:",t)})})})}chrome.alarms.onAlarm.addListener(async e=>{if(console.log("🔔 Alarma activada:",e.name),e.name==="test_alarm"){console.log("🧪 Ejecutando alarma de prueba de días/horarios)"),chrome.storage.sync.get(["settings"],n=>{const o=n.settings||u,t="🧪 ¡Alarma de prueba activada!";console.log("🔧 Configuración para alarma de prueba:",o.notificationType),(o.notificationType==="system"||o.notificationType==="both")&&d({type:"basic",iconUrl:"icon-128.png",title:"Standing Desk Reminder - PRUEBA",message:t,requireInteraction:!0}),(o.notificationType==="alert"||o.notificationType==="both")&&chrome.tabs.query({active:!0,currentWindow:!0},a=>{const r=a[0];r&&r.id&&r.url&&!r.url.startsWith("chrome://")&&!r.url.startsWith("chrome-extension://")&&chrome.scripting.executeScript({target:{tabId:r.id},func:i=>{alert(i)},args:[t]})})});return}if(e.name.startsWith("standing_desk_")){const n=parseInt(e.name.split("_")[2]);chrome.storage.sync.get(["schedule","settings"],o=>{const t=o.schedule||g,a=o.settings||u,r=t[n];if(r&&r.enabled){const i=r.action==="standing"?"¡Es hora de trabajar de pie! 🚶‍♂️":"¡Es hora de sentarse! 🪑";if(console.log("📢 Procesando recordatorio:",i),console.log("🔧 Tipo de notificación configurado:",a.notificationType),!T(a)){console.log("⏸️ Notificación pausada: fuera de días/horarios laborables");return}(a.notificationType==="system"||a.notificationType==="both")&&d({type:"basic",iconUrl:"icon-128.png",title:"Standing Desk Reminder",message:i,requireInteraction:!0}),(a.notificationType==="alert"||a.notificationType==="both")&&chrome.tabs.query({active:!0,currentWindow:!0},c=>{const s=c[0];s&&s.id&&s.url&&!s.url.startsWith("chrome://")&&!s.url.startsWith("chrome-extension://")&&chrome.scripting.executeScript({target:{tabId:s.id},func:f=>{alert(f)},args:[i]})})}})}});chrome.runtime.onInstalled.addListener(async()=>{console.log("🚀 Extension instalada ✅"),console.log("🎧 Service Worker listo para recibir mensajes"),chrome.storage.sync.get(["schedule","settings"],e=>{let n=!1;const o={};e.schedule||(o.schedule=g,n=!0,console.log("📝 Inicializando horarios por defecto"));const t=e.settings;(!t||!t.workDays||!t.workHours||typeof t.workDays.monday>"u")&&(o.settings=u,n=!0,console.log("📝 Actualizando configuración de notificaciones (estructura incompleta)")),n&&chrome.storage.sync.set(o,()=>{console.log("✅ Configuración por defecto guardada:",o)})}),await w(),h()});chrome.runtime.onStartup.addListener(()=>{console.log("🔁 onStartup: Reconfigurando alarmas al iniciar Chrome"),h()});chrome.runtime.onMessage.addListener((e,n,o)=>{if(e.type==="GET_SCHEDULE")return chrome.storage.sync.get(["schedule"],t=>{o({schedule:t.schedule||g})}),!0;if(e.type==="GET_SETTINGS")return chrome.storage.sync.get(["settings"],t=>{o({settings:t.settings||u})}),!0;if(e.type==="UPDATE_ALARMS"){o({success:!0}),h();return}if(e.type==="CREATE_TEST_ALARM"){o({success:!0}),chrome.alarms.create("test_alarm",{when:Date.now()+5e3});return}if(e.type==="TEST_NOTIFICATION"){o({success:!0}),console.log("🧪 Ejecutando notificación de prueba de días/horarios)"),chrome.storage.sync.get(["settings"],t=>{const a=t.settings||u;console.log("🔧 Tipo de notificación configurado:",a.notificationType),(a.notificationType==="system"||a.notificationType==="both")&&d({type:"basic",iconUrl:"icon-128.png",title:"Standing Desk Reminder - PRUEBA",message:"🧪 ¡Esta es una notificación de prueba!",requireInteraction:!0}),(a.notificationType==="alert"||a.notificationType==="both")&&chrome.tabs.query({active:!0,currentWindow:!0},r=>{const i=r[0];i&&i.id&&i.url&&!i.url.startsWith("chrome://")&&!i.url.startsWith("chrome-extension://")&&chrome.scripting.executeScript({target:{tabId:i.id},func:c=>{alert(c)},args:["🧪 ¡Esta es una alerta de prueba!"]})})});return}if(e.type==="PING"){o({success:!0,message:"Service worker listo"});return}o({success:!1,error:"Mensaje no reconocido"})});
//# sourceMappingURL=background.js.map
