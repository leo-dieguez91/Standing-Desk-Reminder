{"version":3,"file":"background.js","sources":["../src/background.ts"],"sourcesContent":["/// <reference lib=\"WebWorker\" />\nexport {}\n\ndeclare const self: ServiceWorkerGlobalScope\n\n// Definir tipos para variables de entorno de Vite\ninterface ImportMetaEnv {\n  readonly VITE_VAPID_PUBLIC_KEY: string\n  readonly VITE_BACKEND_SUBSCRIBE_URL: string\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}\n\n// ====== TIPOS ======\ninterface ScheduleItem {\n  time: string;\n  action: 'standing' | 'sitting';\n  enabled: boolean;\n}\n\ninterface ExtensionSettings {\n  notificationType: 'system' | 'alert' | 'both';\n  workDays: {\n    monday: boolean;\n    tuesday: boolean;\n    wednesday: boolean;\n    thursday: boolean;\n    friday: boolean;\n    saturday: boolean;\n    sunday: boolean;\n  };\n  workHours: {\n    start: string;\n    end: string;\n    enabled: boolean;\n  };\n}\n\n// ====== CONFIG ======\nconst VAPID_PUBLIC_KEY = (import.meta as any).env?.VITE_VAPID_PUBLIC_KEY ?? \"\"\nconst BACKEND_SUBSCRIBE_URL = (import.meta as any).env?.VITE_BACKEND_SUBSCRIBE_URL ?? \"\"\n\nconst defaultSchedule: ScheduleItem[] = [\n  { time: \"09:00\", action: \"sitting\", enabled: true },\n  { time: \"11:00\", action: \"standing\", enabled: true },\n  { time: \"14:00\", action: \"sitting\", enabled: true }\n];\n\nconst defaultSettings = {\n  notificationType: 'both' as 'system' | 'alert' | 'both',\n  workDays: {\n    monday: true,\n    tuesday: true,\n    wednesday: true,\n    thursday: true,\n    friday: true,\n    saturday: true,\n    sunday: true\n  },\n  workHours: {\n    start: '09:00',\n    end: '18:00',\n    enabled: false\n  }\n};\n\n// ====== HELPERS ======\nfunction urlB64ToUint8Array(base64String: string) {\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4)\n  const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\")\n  const rawData = atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n  for (let i = 0; i < rawData.length; ++i) outputArray[i] = rawData.charCodeAt(i)\n  return outputArray\n}\n\n// Verificar si las notificaciones deben mostrarse seg√∫n d√≠as y horarios\nfunction shouldShowNotification(settings: ExtensionSettings): boolean {\n  const now = new Date();\n  const currentDay = now.getDay(); // 0 = domingo, 1 = lunes, etc.\n  const currentTime = now.getHours() * 60 + now.getMinutes(); // tiempo en minutos\n  \n  // Verificar si la configuraci√≥n tiene la estructura completa\n  if (!settings.workDays || !settings.workHours) {\n    console.log('‚ö†Ô∏è Configuraci√≥n incompleta, usando configuraci√≥n por defecto');\n    settings = { ...settings, ...defaultSettings };\n  }\n  \n  // Verificar d√≠a de la semana\n  const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  const currentDayName = dayNames[currentDay];\n  \n  if (!settings.workDays[currentDayName as keyof typeof settings.workDays]) {\n    console.log(`‚ùå Notificaci√≥n bloqueada: ${currentDayName} no est√° habilitado`);\n    return false;\n  }\n  \n  // Verificar horario de trabajo si est√° habilitado\n  if (settings.workHours && settings.workHours.enabled) {\n    const [startHour, startMin] = settings.workHours.start.split(':').map(Number);\n    const [endHour, endMin] = settings.workHours.end.split(':').map(Number);\n    const startTime = startHour * 60 + startMin;\n    const endTime = endHour * 60 + endMin;\n    \n    if (currentTime < startTime || currentTime > endTime) {\n      console.log(`‚ùå Notificaci√≥n bloqueada: fuera del horario de trabajo (${settings.workHours.start} - ${settings.workHours.end})`);\n      return false;\n    }\n  }\n  \n  console.log(`‚úÖ Notificaci√≥n permitida: ${currentDayName} dentro del horario`);\n  return true;\n}\n\nfunction notify(options: chrome.notifications.NotificationOptions<true>): Promise<string> {\n  // Forzar que las notificaciones suenen en Mac\n  const notificationOptions = {\n    ...options,\n    silent: false, // Forzar sonido\n    requireInteraction: true, // Mantener visible hasta que el usuario interact√∫e\n    priority: 2 // Alta prioridad para asegurar que suene\n  };\n  \n  // Reproducir sonido adicional para Mac\n  try {\n    const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT');\n    audio.volume = 0.7;\n    audio.play().catch(e => console.log('üîä Audio no disponible:', e));\n  } catch (e) {\n    console.log('üîä Audio no disponible:', e);\n  }\n  \n  return new Promise((resolve) => chrome.notifications.create(notificationOptions, id => resolve(id)))\n}\n\n// ====== WEB PUSH ======\nasync function ensurePushSubscription() {\n  if (!VAPID_PUBLIC_KEY) {\n    console.log(\"‚ö†Ô∏è VAPID_PUBLIC_KEY no configurada, Web Push deshabilitado\");\n    return null;\n  }\n  \n  try {\n    console.log(\"üîê Configurando suscripci√≥n Web Push...\");\n    const sub = await self.registration.pushManager.getSubscription()\n      ?? await self.registration.pushManager.subscribe({\n        userVisibleOnly: true, // cambiar a false para \"silent push\" (Chrome 121+)\n        applicationServerKey: urlB64ToUint8Array(VAPID_PUBLIC_KEY)\n      })\n\n    console.log(\"‚úÖ Suscripci√≥n Web Push creada:\", sub.endpoint);\n\n    if (BACKEND_SUBSCRIBE_URL) {\n      console.log(\"üì§ Enviando suscripci√≥n al backend...\");\n      await fetch(BACKEND_SUBSCRIBE_URL, {\n        method: \"POST\",\n        headers: { \"content-type\": \"application/json\" },\n        body: JSON.stringify(sub)\n      });\n      console.log(\"‚úÖ Suscripci√≥n enviada al backend\");\n    }\n    return sub\n  } catch (err) {\n    console.error(\"‚ùå Error en suscripci√≥n Web Push:\", err)\n    return null\n  }\n}\n\n// Recibir push y mostrar notificaci√≥n\nself.addEventListener(\"push\", (event: PushEvent) => {\n  console.log(\"üì® Push recibido:\", event);\n  event.waitUntil((async () => {\n    let payload: any = {}\n    try { \n      payload = event.data ? await event.data.json() : {} \n    } catch (e) {\n      console.error(\"‚ùå Error parseando payload:\", e);\n    }\n    \n    const title = payload.title ?? \"Standing Desk Reminder\"\n    const message = payload.body ?? \"Es hora de cambiar de postura\"\n    \n    console.log(\"üîî Mostrando notificaci√≥n push:\", { title, message });\n    await notify({\n      type: \"basic\",\n      iconUrl: \"icon-128.png\",\n      title,\n      message,\n      requireInteraction: true\n    })\n  })())\n})\n\n// ====== ALARMAS STANDING DESK ======\nfunction setupAlarms() {\n  console.log('üîß Configurando alarmas de Standing Desk...');\n  \n  chrome.storage.sync.get(['schedule'], (result) => {\n    console.log('üìã Datos le√≠dos del storage para alarmas:', result);\n    const schedule: ScheduleItem[] = result.schedule || defaultSchedule;\n\n    // Limpiar alarmas existentes\n    chrome.alarms.clearAll(() => {\n      console.log('üßπ Alarmas anteriores limpiadas');\n      \n      // Crear nuevas alarmas\n      let alarmsCreated = 0;\n      schedule.forEach((item: ScheduleItem, index: number) => {\n        console.log(`üìã Procesando item ${index}:`, item);\n        \n        if (item.enabled) {\n          const [hours, minutes] = item.time.split(':').map(Number);\n          const now = new Date();\n          const alarmTime = new Date();\n          alarmTime.setHours(hours, minutes, 0, 0);\n\n          // Si la hora ya pas√≥ hoy, programar para ma√±ana\n          if (alarmTime <= now) {\n            alarmTime.setDate(alarmTime.getDate() + 1);\n          }\n\n          chrome.alarms.create(`standing_desk_${index}`, {\n            when: alarmTime.getTime(),\n            periodInMinutes: 24 * 60 // Repetir cada 24 horas\n          });\n\n          alarmsCreated++;\n          console.log(`‚è∞ Alarma ${index} programada para ${item.time} (${item.action})`);\n          console.log(`üìÖ Pr√≥xima ejecuci√≥n: ${alarmTime.toLocaleString()}`);\n        } else {\n          console.log(`‚ùå Alarma ${index} deshabilitada`);\n        }\n      });\n      \n      console.log(`‚úÖ Total de alarmas creadas: ${alarmsCreated}`);\n      \n      // Verificar alarmas creadas\n      chrome.alarms.getAll((alarms) => {\n        console.log('üìã Alarmas activas despu√©s de setup:', alarms);\n      });\n    });\n  });\n}\n\n// Manejar alarmas de standing desk\nchrome.alarms.onAlarm.addListener(async (alarm) => {\n  console.log('üîî Alarma activada:', alarm.name);\n  \n  // Manejar alarma de prueba\n  if (alarm.name === 'test_alarm') {\n    console.log('üß™ Ejecutando alarma de prueba de d√≠as/horarios)');\n    \n    chrome.storage.sync.get(['settings'], (result) => {\n      const settings = result.settings || defaultSettings;\n      const testMessage = 'üß™ ¬°Alarma de prueba activada!';\n      \n      console.log('üîß Configuraci√≥n para alarma de prueba:', settings.notificationType);\n      \n      // Las pruebas SIEMPRE funcionan, ignorando d√≠as y horarios\n      \n      if (settings.notificationType === 'system' || settings.notificationType === 'both') {\n        notify({\n          type: 'basic',\n          iconUrl: 'icon-128.png',\n          title: 'Standing Desk Reminder - PRUEBA',\n          message: testMessage,\n          requireInteraction: true\n        });\n      }\n      \n      if (settings.notificationType === 'alert' || settings.notificationType === 'both') {\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n          const activeTab = tabs[0];\n          if (activeTab && activeTab.id && activeTab.url && \n              !activeTab.url.startsWith('chrome://') && \n              !activeTab.url.startsWith('chrome-extension://')) {\n            \n            chrome.scripting.executeScript({\n              target: { tabId: activeTab.id },\n              func: (text) => { alert(text); },\n              args: [testMessage]\n            });\n          }\n        });\n      }\n    });\n    return;\n  }\n  \n  // Manejar alarmas regulares de standing desk\n  if (alarm.name.startsWith('standing_desk_')) {\n    const index = parseInt(alarm.name.split('_')[2]);\n    \n    chrome.storage.sync.get(['schedule', 'settings'], (result) => {\n      const schedule: ScheduleItem[] = result.schedule || defaultSchedule;\n      const settings = result.settings || defaultSettings;\n      const reminder = schedule[index];\n\n      if (reminder && reminder.enabled) {\n        const message = reminder.action === 'standing'\n          ? '¬°Es hora de trabajar de pie! üö∂‚Äç‚ôÇÔ∏è'\n          : '¬°Es hora de sentarse! ü™ë';\n\n        console.log('üì¢ Procesando recordatorio:', message);\n        console.log('üîß Tipo de notificaci√≥n configurado:', settings.notificationType);\n\n        // Verificar si debe mostrar la notificaci√≥n seg√∫n d√≠as y horarios\n        if (!shouldShowNotification(settings)) {\n          console.log('‚è∏Ô∏è Notificaci√≥n pausada: fuera de d√≠as/horarios laborables');\n          return;\n        }\n\n        // Mostrar notificaci√≥n del sistema si est√° habilitada\n        if (settings.notificationType === 'system' || settings.notificationType === 'both') {\n          notify({\n            type: 'basic',\n            iconUrl: 'icon-128.png',\n            title: 'Standing Desk Reminder',\n            message: message,\n            requireInteraction: true\n          });\n        }\n\n        // Mostrar alert en la pesta√±a activa si est√° habilitado\n        if (settings.notificationType === 'alert' || settings.notificationType === 'both') {\n          chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            const activeTab = tabs[0];\n            if (activeTab && activeTab.id && activeTab.url && \n                !activeTab.url.startsWith('chrome://') && \n                !activeTab.url.startsWith('chrome-extension://')) {\n              \n              chrome.scripting.executeScript({\n                target: { tabId: activeTab.id },\n                func: (text) => { alert(text); },\n                args: [message]\n              });\n            }\n          });\n        }\n      }\n    });\n  }\n});\n\n// ====== INICIALIZACI√ìN ======\nchrome.runtime.onInstalled.addListener(async () => {\n  console.log(\"üöÄ Extension instalada ‚úÖ\")\n  console.log(\"üéß Service Worker listo para recibir mensajes\")\n  \n  // Inicializar configuraci√≥n por defecto\n  chrome.storage.sync.get(['schedule', 'settings'], (result) => {\n    let needsUpdate = false;\n    const updates: any = {};\n    \n    if (!result.schedule) {\n      updates.schedule = defaultSchedule;\n      needsUpdate = true;\n      console.log('üìù Inicializando horarios por defecto');\n    }\n    \n    // Verificar si la configuraci√≥n est√° completa o necesita actualizaci√≥n\n    const currentSettings = result.settings;\n    if (!currentSettings || \n        !currentSettings.workDays || \n        !currentSettings.workHours ||\n        typeof currentSettings.workDays.monday === 'undefined') {\n      updates.settings = defaultSettings;\n      needsUpdate = true;\n      console.log('üìù Actualizando configuraci√≥n de notificaciones (estructura incompleta)');\n    }\n    \n    if (needsUpdate) {\n      chrome.storage.sync.set(updates, () => {\n        console.log('‚úÖ Configuraci√≥n por defecto guardada:', updates);\n      });\n    }\n  });\n  \n  // Configurar Web Push\n  await ensurePushSubscription();\n  \n  // Configurar alarmas\n  setupAlarms();\n});\n\n// Asegurar configuraci√≥n de alarmas al iniciar el navegador\nchrome.runtime.onStartup.addListener(() => {\n  console.log('üîÅ onStartup: Reconfigurando alarmas al iniciar Chrome');\n  setupAlarms();\n});\n\n// ====== MANEJO DE MENSAJES ======\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  \n  if (request.type === 'GET_SCHEDULE') {\n    chrome.storage.sync.get(['schedule'], (result) => {\n      sendResponse({ schedule: result.schedule || defaultSchedule });\n    });\n    return true; // Mantener el puerto abierto para respuesta as√≠ncrona\n  }\n  \n  if (request.type === 'GET_SETTINGS') {\n    chrome.storage.sync.get(['settings'], (result) => {\n      sendResponse({ settings: result.settings || defaultSettings });\n    });\n    return true; // Mantener el puerto abierto para respuesta as√≠ncrona\n  }\n  \n  if (request.type === 'UPDATE_ALARMS') {\n    sendResponse({ success: true });\n    setupAlarms();\n    return;\n  }\n  \n  if (request.type === 'CREATE_TEST_ALARM') {\n    sendResponse({ success: true });\n    chrome.alarms.create('test_alarm', { when: Date.now() + 5000 });\n    return;\n  }\n  \n  if (request.type === 'TEST_NOTIFICATION') {\n    sendResponse({ success: true });\n    \n    console.log('üß™ Ejecutando notificaci√≥n de prueba de d√≠as/horarios)');\n    \n    chrome.storage.sync.get(['settings'], (result) => {\n      const settings = result.settings || defaultSettings;\n      \n      // Las pruebas SIEMPRE funcionan, ignorando d√≠as y horarios\n      console.log('üîß Tipo de notificaci√≥n configurado:', settings.notificationType);\n      \n      if (settings.notificationType === 'system' || settings.notificationType === 'both') {\n        notify({\n          type: 'basic',\n          iconUrl: 'icon-128.png',\n          title: 'Standing Desk Reminder - PRUEBA',\n          message: 'üß™ ¬°Esta es una notificaci√≥n de prueba!',\n          requireInteraction: true\n        });\n      }\n      \n      if (settings.notificationType === 'alert' || settings.notificationType === 'both') {\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n          const activeTab = tabs[0];\n          if (activeTab && activeTab.id && activeTab.url && \n              !activeTab.url.startsWith('chrome://') && \n              !activeTab.url.startsWith('chrome-extension://')) {\n            \n            chrome.scripting.executeScript({\n              target: { tabId: activeTab.id },\n              func: (text) => { alert(text); },\n              args: ['üß™ ¬°Esta es una alerta de prueba!']\n            });\n          }\n        });\n      }\n    });\n    return;\n  }\n  \n  if (request.type === 'PING') {\n    sendResponse({ success: true, message: 'Service worker listo' });\n    return;\n  }\n  \n  // Mensaje no reconocido\n  sendResponse({ success: false, error: 'Mensaje no reconocido' });\n});\n"],"names":["VAPID_PUBLIC_KEY","__vite_import_meta_env__","BACKEND_SUBSCRIBE_URL","defaultSchedule","defaultSettings","urlB64ToUint8Array","base64String","padding","base64","rawData","outputArray","i","shouldShowNotification","settings","now","currentDay","currentTime","currentDayName","startHour","startMin","endHour","endMin","startTime","endTime","notify","options","notificationOptions","audio","e","resolve","id","ensurePushSubscription","sub","err","event","payload","title","message","setupAlarms","result","schedule","alarmsCreated","item","index","hours","minutes","alarmTime","alarms","alarm","testMessage","tabs","activeTab","text","reminder","needsUpdate","updates","currentSettings","request","sender","sendResponse"],"mappings":"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"}